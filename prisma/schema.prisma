generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
}

model Sex {
  id     Int     @id @default(autoincrement())
  gender Gender
  users  User[] 
}

enum Role {
  SUPER_ADMIN
  CLINIC_ADMIN
  DENTIST
  RECEPTIONIST
  PATIENT
}

enum AppointmentStatusEnum {
  WAITING
  UPCOMING
  COMPLETED
}

enum PaymentStatusEnum {
  PENDING
  PAID
  CANCELLED
}

enum QueueStatusEnum {
  WAITING
  IN_PROGRESS
  COMPLETED
  SKIPPED
  CANCELLED
}

model User {
  id                Int           @id @default(autoincrement())
  nationalId        BigInt        @unique  
  email             String        @unique
  password          String
  role              Role
  firstName         String
  lastName          String
  sexId             Int
  phone             String?
  city              String?
  postalCode        String?
  address           String?
  dateOfBirth       DateTime?    
  isVerified        Boolean       @default(false)
  verificationToken String?       @unique
  tokenExpiresAt    DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  sex               Sex           @relation(fields: [sexId], references: [id])
  patient           Patient?         @relation
  dentist           Dentist?         @relation
  receptionist      Receptionist?    @relation
}

model Specialty {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  dentists    Dentist[] 
}

model Dentist {
  id            Int           @id @default(autoincrement())
  userId        Int           @unique
  specialtyId   Int
  availability  Schedule[]    
  user          User          @relation(fields: [userId], references: [id])
  specialty     Specialty     @relation(fields: [specialtyId], references: [id])
  appointments  Appointment[]  
  treatments    Treatment[]  
  payments      Payment[]
}

model Schedule {
  id        Int       @id @default(autoincrement())
  dentistId Int
  dayOfWeek Int      
  startTime String    
  endTime   String   
  isActive  Boolean   @default(true)
  dentist   Dentist   @relation(fields: [dentistId], references: [id])
}

model Receptionist {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  queues    Queue[]  
}

model Patient {
  id              Int           @id @default(autoincrement())
  userId          Int           @unique
  medicalHistory  String?
  allergies       String?       
  bloodType       String?       
  emergencyContact String?      
  insuranceInfo   String?       
  user            User          @relation(fields: [userId], references: [id])
  appointments    Appointment[] 
  treatments      Treatment[]  
  payments        Payment[]     
  queueEntries    Queue[]       
  documents       Document[]    
}

model Treatment {
  id           Int       @id @default(autoincrement())
  patientId    Int
  dentistId    Int
  appointmentId Int?     @unique
  name         String
  description  String?
  startDate    DateTime
  endDate      DateTime?
  notes        String?
  cost         Decimal
  patient      Patient    @relation(fields: [patientId], references: [id])
  dentist      Dentist    @relation(fields: [dentistId], references: [id])
  appointment  Appointment? @relation(fields: [appointmentId], references: [id])
  payments     Payment[]
}

model Document {
  id        Int      @id @default(autoincrement())
  patientId Int
  name      String
  type      String   // X-ray, Prescription, Invoice, etc.
  url       String
  uploadedAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model AppointmentType {
  id           Int           @id @default(autoincrement())
  type         String        @unique
  duration     Int           // Duration in minutes
  description  String?
  cost         Decimal       // Base cost for this type
  appointments Appointment[] 
}

model Appointment {
  id              Int                 @id @default(autoincrement())
  patientId       Int
  dentistId       Int
  date            DateTime
  startTime       DateTime            
  endTime         DateTime            
  additionalNotes String?
  status          AppointmentStatusEnum
  typeId          Int
  patient         Patient             @relation(fields: [patientId], references: [id])
  dentist         Dentist             @relation(fields: [dentistId], references: [id])
  type            AppointmentType     @relation(fields: [typeId], references: [id])
  treatment       Treatment?          
}

model Payment {
  id          Int              @id @default(autoincrement())
  patientId   Int
  treatmentId Int?             // Nullable treatment
  dentistId   Int?
  amount      Decimal
  method      String
  reference   String?
  description String?
  date        DateTime
  status      PaymentStatusEnum
  patient     Patient           @relation(fields: [patientId], references: [id])
  treatment   Treatment?        @relation(fields: [treatmentId], references: [id])
  dentist     Dentist?         @relation(fields: [dentistId], references: [id])
}

model Queue {
  id                    Int             @id @default(autoincrement())
  patientId             Int
  receptionistId        Int
  status                QueueStatusEnum
  priority              Int             @default(0)  
  estimatedWaitTime     Int
  arrivalTime           DateTime
  timeWaited            Int
  estimatedTimeToDoctor Int
  notes                 String?         // Optional notes
  patient               Patient        @relation(fields: [patientId], references: [id])
  receptionist          Receptionist   @relation(fields: [receptionistId], references: [id])
}
